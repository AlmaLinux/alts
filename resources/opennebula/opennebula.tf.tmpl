variable "one_endpoint" {}
variable "one_username" {}
variable "one_password" {
  sensitive = true
}

provider "opennebula" {
  endpoint      = var.one_endpoint
  username      = var.one_username
  password      = var.one_password
}

data "opennebula_virtual_network" "test_system_network" {
  name = "${opennebula_network}"
}

data "opennebula_templates" "filtered_templates" {
  name_regex = "${template_regex_str}"
  sort_on    = "register_date"
  order      = "ASC" # order from newer to older
}

locals {
  all_templates = data.opennebula_templates.filtered_templates.templates

  # filtering through templates with specific channels
  templates_with_channels = [
    for t in local.all_templates : t
    if length(regexall("\\.${channel}\\.", t.name)) > 0
  ]

  has_templates_with_channels = length(local.templates_with_channels) > 0

  selected_template = (
    local.has_templates_with_channels ? local.templates_with_channels[0] :
    local.all_templates[0]
  )

  disk_0 = local.selected_template.disk[0]
  disk_size = max(
    local.disk_0.size,        # Original disk size from template
    15360,                    # Minimum required size
    local.disk_0.size + 5120  # Original size + 5GB
  )
}

resource "opennebula_virtual_machine" "${vm_name}" {
  name = "${vm_name}"
  template_id = local.selected_template.id
  permissions = "660"
  group = "${opennebula_vm_group}"
  memory = "${vm_ram_size}"

  cpumodel {
    model = "host-passthrough"
  }
  disk {
    image_id = local.disk_0.image_id
    size = local.disk_size
    target = "sda"
  }
  nic {
    network_id = data.opennebula_virtual_network.test_system_network.id
    model      = "virtio"
  }

  context = {
    NETWORK      = "YES"
    HOSTNAME     = "${vm_name}.test.com"
    SSH_PUBLIC_KEY = "$USER[SSH_PUBLIC_KEY]"
  }
}

output "vm_ip" {
  value = opennebula_virtual_machine.${vm_name}.ip
}

output "vm_id" {
  value = opennebula_virtual_machine.${vm_name}.id
}

output "template_name" {
  value = local.selected_template.name
}
